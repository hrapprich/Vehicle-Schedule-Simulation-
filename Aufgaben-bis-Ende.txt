offene Punkte:
(x) Einleseroutine für gegebene Daten fertigstellen (svenno)
(x) Dokumentation über benötigte Daten für Simulation (Dictionarys beschreiben)
(x) Daten für Störungen aus GUI-Eingabe ziehen
(x) Entscheidung dem Benutzer offen lassen: Pufferzeiten für Abbau Verspätungen nutzen oder nicht (chris)
(x) In Output Verspätungsursache aufnehmen (vlt durch Klassifikation und Ausgabe einer Zahl)
(x) Störungen auf drei Ebenen: Einzelfahrt, Strecke/Umkreis, Global (chris)
(x) Stau einfügen (gehört zu Störebene Strecke)
(x) smartere Stau-Funktion mit dynamischen Vorkommen
(x) Staus lokalisieren
(x) Verspätungen in relative Werte umwandeln
(x) mehr und validere Störungsarten
(x) "Interface" für Störungen
(x) Funktionen verschachteln (Grundfunktionen (wie z.B. Stau), die von Spezialfunktionen getriggert werden)
(x) GUI optimieren/verschönern
(x) Störungen aufräumen und mit GUI verknüpfen
(x) Prioliste erstellen (was muss bis wann stehen?)
(x) Störungsursache für Pausen removen
(x) Störungen zum Laufen bringen
(x) Fahrerstörungen raus
(x) KPIs einfügen
  (x) Pünktlichkeit: Anteil und Anzahl an pünktlichen Fahrten (Ist-Soll = 0)
  (x) Verspätungspropagation (Formel in Word)
    Frage: ist das Ergebnis nicht immer: Pufferzeit - delayTime (Gesamtverspätung), wenn ja:
            dann können wir das wahrscheinlich mit der breaktime-Funktion ausgeben lassen
  (x) Wirkungsgrade: 
    (x) wieviel Prozent der Zeit sind Servicefahrten und Leerfahrten
    (nicht realisierbar) wieviel Prozent der Strecke sind SF und LF (Distanz in tableFinal einfügen)
(x) Event mit Zeitspanne, die man in GUI festlegen kann
(x) ElementType == 8 als Pause (Entscheidung, ob Pause genutzt werden soll, in GUI)
(nicht sinnvoll erstmal) Überlegungen: dispositive Entscheidung: Abbruchbindung 
  (meist einen) wieviele Fahrzeuge haben nur einen Teilumlauf? hier wirken dispositive Entscheidungen nicht
(x) Leerfahrten werden nicht berücksichtigt, da sie nicht eindeutig zugeordnet werden können aus den gegebenen Daten (Distanz etc einfach auf 0 gesetzt)
(x) Unfallstörung fixen 
(x) Dateninkonsistenzen ausbessern
(x) Leerfahrten Geschwindigkeit erhöhen

Prioliste:
Fokus auf Dauer der Simulation. DutyID und Swaps konzeptionell überdenken, aber erstmal nicht so relevant (beschlossen am 29.1.20 mit David und Lena). Simulation mehrere Tage laufen lassen können!
( ) Simulationsdauer ausbauen auf mehrere Tage bzw erstmal Dauer auf 30h ausbauen maybe

( ) Idee finden: Personaldaten konzeptionell mitdenken bzw. Schnittstelle einfügen
( ) Idee finden: Fahrzeuge miteinander verknüpfen
( ) Fahrzeugausfall (Depot & während der Fahrt) fixen (Funktion funktioniert. Ausgabe fehlt, dass Fahrzeug ausgefallen ist!)
( ) Code objektorientiert gestalten
( ) Code Effizienz erhöhen (vor allem Einleseroutine)
( ) Dokumentation Code
( ) GUI ansehnlich machen (niedrige Prio)
( ) Teilweiser Output in GUI (niedrige Prio) 


( ) PK1 Paper lesen / Fokus auf Suchprozess




